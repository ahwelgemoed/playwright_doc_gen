import {
  Reporter,
  TestStep,
  Location,
  TestCase,
  TestResult,
} from "@playwright/test/reporter";
const fs = require("fs");
const path = require("path");
const readline = require("readline");

const OUTPUT_FOLDER = "output";

const madeMarkdownFile = async (testName: string, results: TestStep[]) => {
  if (!fs.existsSync(path.join(__dirname, OUTPUT_FOLDER))) {
    fs.mkdirSync(path.join(__dirname, OUTPUT_FOLDER));
  }
  // Super shitty way to make a markdown file but ü§∑üèΩ‚Äç‚ôÄÔ∏è
  let markdown = `# ${testName.toLocaleUpperCase()} <br />
  `;
  for (let index = 0; index < results.length; index++) {
    const element = results[index];
    const { title } = element;
    if (title.includes("page.goto")) {
      const match = title.match(/page\.goto\((https?:\/\/[^)]+)\)/);
      if (!match?.length) return;
      markdown += `Go to [here](${match![1]}). <br /> `;
    }
    if (title.includes("locator.click")) {
      const match = title.match(/\(internal:role=([^\[]+)\[name="([^"]+)"/i);
      if (match?.length !== 3) return;

      markdown += `Click on the _${match[1]}_ called **${match[2]}** <br /> `;
    }
    if (title.includes("page.screenshot")) {
      if (element.location) {
        const img = await readFileAtLocation(element.location);
        console.log("img", img);
        // Move the image to the output folder
        await fs.renameSync(
          path.join(__dirname, img),
          path.join(__dirname, OUTPUT_FOLDER, img)
        );
        markdown += `![${img}](./${img}) <br /> `;
      }
    }
  }
  markdown += `<small>Generated by [Playwright Docs Creator]</small>`;
  const joinedName = testName.replace(/ /g, "_");

  // Create output folder if it doesn't exist
  if (!fs.existsSync(path.join(__dirname, OUTPUT_FOLDER))) {
    fs.mkdirSync(path.join(__dirname, OUTPUT_FOLDER));
  }

  fs.writeFileSync(
    path.join(`${__dirname}/${OUTPUT_FOLDER}`, `${joinedName}.md`),
    markdown
  );
};

const readFileAtLocation = async (path: Location): Promise<string> => {
  return new Promise((resolve, reject) => {
    try {
      const stream = fs.createReadStream(path.file);
      const rl = readline.createInterface({
        input: stream,
        crlfDelay: Infinity,
      });

      let lineNum = 0;
      let image = "";
      rl.on("line", (line: string) => {
        lineNum++;
        if (lineNum === path.line) {
          const match = line.match(/path: "([^"]+)"/);
          if (!match?.length) return;

          image = match[1];
          rl.close();
          resolve(image);
        }
      });
    } catch (error) {
      reject(error);
    }
  });
};

class MyReporter implements Reporter {
  onTestEnd(test: TestCase, result: TestResult) {
    console.log(`Finished test ${test.title}`);
    madeMarkdownFile(test.title, result.steps);
  }
}

export default MyReporter;
